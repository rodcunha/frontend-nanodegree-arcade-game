{"version":3,"sources":["js\\resources.js"],"names":["resourceCache","loading","readyCallbacks","load","urlOrArr","Array","forEach","url","_load","img","Image","onload","isReady","func","src","get","ready","k","hasOwnProperty","onReady","push","window","Resources"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAMA,CAAC,YAAW;AACR,QAAIA,gBAAgB,EAApB;AACA,QAAIC,UAAU,EAAd;AACA,QAAIC,iBAAiB,EAArB;;AAEA;;;;AAIA,aAASC,IAAT,CAAcC,QAAd,EAAwB;AACpB,YAAGA,oBAAoBC,KAAvB,EAA8B;AAC1B;;;;AAIAD,qBAASE,OAAT,CAAiB,UAASC,GAAT,EAAc;AAC3BC,sBAAMD,GAAN;AACH,aAFD;AAGH,SARD,MAQO;AACH;;;;AAIAC,kBAAMJ,QAAN;AACH;AACJ;;AAED;;;AAGA,aAASI,KAAT,CAAeD,GAAf,EAAoB;AAChB,YAAGP,cAAcO,GAAd,CAAH,EAAuB;AACnB;;;;AAIA,mBAAOP,cAAcO,GAAd,CAAP;AACH,SAND,MAMO;AACH;;;AAGA,gBAAIE,MAAM,IAAIC,KAAJ,EAAV;AACAD,gBAAIE,MAAJ,GAAa,YAAW;AACpB;;;;AAIAX,8BAAcO,GAAd,IAAqBE,GAArB;;AAEA;;;AAGA,oBAAGG,SAAH,EAAc;AACVV,mCAAeI,OAAf,CAAuB,UAASO,IAAT,EAAe;AAAEA;AAAS,qBAAjD;AACH;AACJ,aAbD;;AAeA;;;;AAIAb,0BAAcO,GAAd,IAAqB,KAArB;AACAE,gBAAIK,GAAJ,GAAUP,GAAV;AACH;AACJ;;AAED;;;;AAIA,aAASQ,GAAT,CAAaR,GAAb,EAAkB;AACd,eAAOP,cAAcO,GAAd,CAAP;AACH;;AAED;;;AAGA,aAASK,OAAT,GAAmB;AACf,YAAII,QAAQ,IAAZ;AACA,aAAI,IAAIC,CAAR,IAAajB,aAAb,EAA4B;AACxB,gBAAGA,cAAckB,cAAd,CAA6BD,CAA7B,KACA,CAACjB,cAAciB,CAAd,CADJ,EACsB;AAClBD,wBAAQ,KAAR;AACH;AACJ;AACD,eAAOA,KAAP;AACH;;AAED;;;AAGA,aAASG,OAAT,CAAiBN,IAAjB,EAAuB;AACnBX,uBAAekB,IAAf,CAAoBP,IAApB;AACH;;AAED;;;AAGAQ,WAAOC,SAAP,GAAmB;AACfnB,cAAMA,IADS;AAEfY,aAAKA,GAFU;AAGfI,iBAASA,OAHM;AAIfP,iBAASA;AAJM,KAAnB;AAMH,CAxGD","file":"resources.99096332.map","sourcesContent":["/* Resources.js\r\n * This is simply an image loading utility. It eases the process of loading\r\n * image files so that they can be used within your game. It also includes\r\n * a simple \"caching\" layer so it will reuse cached images if you attempt\r\n * to load the same image multiple times.\r\n */\r\n(function() {\r\n    var resourceCache = {};\r\n    var loading = [];\r\n    var readyCallbacks = [];\r\n\r\n    /* This is the publicly accessible image loading function. It accepts\r\n     * an array of strings pointing to image files or a string for a single\r\n     * image. It will then call our private image loading function accordingly.\r\n     */\r\n    function load(urlOrArr) {\r\n        if(urlOrArr instanceof Array) {\r\n            /* If the developer passed in an array of images\r\n             * loop through each value and call our image\r\n             * loader on that image file\r\n             */\r\n            urlOrArr.forEach(function(url) {\r\n                _load(url);\r\n            });\r\n        } else {\r\n            /* The developer did not pass an array to this function,\r\n             * assume the value is a string and call our image loader\r\n             * directly.\r\n             */\r\n            _load(urlOrArr);\r\n        }\r\n    }\r\n\r\n    /* This is our private image loader function, it is\r\n     * called by the public image loader function.\r\n     */\r\n    function _load(url) {\r\n        if(resourceCache[url]) {\r\n            /* If this URL has been previously loaded it will exist within\r\n             * our resourceCache array. Just return that image rather\r\n             * re-loading the image.\r\n             */\r\n            return resourceCache[url];\r\n        } else {\r\n            /* This URL has not been previously loaded and is not present\r\n             * within our cache; we'll need to load this image.\r\n             */\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                /* Once our image has properly loaded, add it to our cache\r\n                 * so that we can simply return this image if the developer\r\n                 * attempts to load this file in the future.\r\n                 */\r\n                resourceCache[url] = img;\r\n\r\n                /* Once the image is actually loaded and properly cached,\r\n                 * call all of the onReady() callbacks we have defined.\r\n                 */\r\n                if(isReady()) {\r\n                    readyCallbacks.forEach(function(func) { func(); });\r\n                }\r\n            };\r\n\r\n            /* Set the initial cache value to false, this will change when\r\n             * the image's onload event handler is called. Finally, point\r\n             * the image's src attribute to the passed in URL.\r\n             */\r\n            resourceCache[url] = false;\r\n            img.src = url;\r\n        }\r\n    }\r\n\r\n    /* This is used by developers to grab references to images they know\r\n     * have been previously loaded. If an image is cached, this functions\r\n     * the same as calling load() on that URL.\r\n     */\r\n    function get(url) {\r\n        return resourceCache[url];\r\n    }\r\n\r\n    /* This function determines if all of the images that have been requested\r\n     * for loading have in fact been properly loaded.\r\n     */\r\n    function isReady() {\r\n        var ready = true;\r\n        for(var k in resourceCache) {\r\n            if(resourceCache.hasOwnProperty(k) &&\r\n               !resourceCache[k]) {\r\n                ready = false;\r\n            }\r\n        }\r\n        return ready;\r\n    }\r\n\r\n    /* This function will add a function to the callback stack that is called\r\n     * when all requested images are properly loaded.\r\n     */\r\n    function onReady(func) {\r\n        readyCallbacks.push(func);\r\n    }\r\n\r\n    /* This object defines the publicly accessible functions available to\r\n     * developers by creating a global Resources object.\r\n     */\r\n    window.Resources = {\r\n        load: load,\r\n        get: get,\r\n        onReady: onReady,\r\n        isReady: isReady\r\n    };\r\n})();\r\n"]}