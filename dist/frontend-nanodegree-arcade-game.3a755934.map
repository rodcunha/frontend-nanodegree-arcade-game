{"version":3,"sources":["js/resources.js","js/app.js","js/engine.js","index.js"],"names":["resourceCache","loading","readyCallbacks","load","urlOrArr","Array","forEach","url","_load","img","Image","onload","isReady","func","src","get","ready","k","hasOwnProperty","onReady","push","window","Resources","Enemy","sprite","prototype","update","dt","render","ctx","drawImage","x","y","player","allEnemies","document","addEventListener","e","allowedKeys","handleInput","keyCode","Engine","global","doc","win","canvas","createElement","getContext","lastTime","width","height","body","appendChild","main","now","Date","requestAnimationFrame","init","reset","updateEntities","enemy","rowImages","numRows","numCols","row","col","clearRect","renderEntities","modal","getElementById","span","getElementsByClassName","style","display","onclick","event","target"],"mappings":"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","file":"frontend-nanodegree-arcade-game.3a755934.map","sourcesContent":["/* Resources.js\n * This is simply an image loading utility. It eases the process of loading\n * image files so that they can be used within your game. It also includes\n * a simple \"caching\" layer so it will reuse cached images if you attempt\n * to load the same image multiple times.\n */\n(function() {\n    var resourceCache = {};\n    var loading = [];\n    var readyCallbacks = [];\n\n    /* This is the publicly accessible image loading function. It accepts\n     * an array of strings pointing to image files or a string for a single\n     * image. It will then call our private image loading function accordingly.\n     */\n    function load(urlOrArr) {\n        if(urlOrArr instanceof Array) {\n            /* If the developer passed in an array of images\n             * loop through each value and call our image\n             * loader on that image file\n             */\n            urlOrArr.forEach(function(url) {\n                _load(url);\n            });\n        } else {\n            /* The developer did not pass an array to this function,\n             * assume the value is a string and call our image loader\n             * directly.\n             */\n            _load(urlOrArr);\n        }\n    }\n\n    /* This is our private image loader function, it is\n     * called by the public image loader function.\n     */\n    function _load(url) {\n        if(resourceCache[url]) {\n            /* If this URL has been previously loaded it will exist within\n             * our resourceCache array. Just return that image rather\n             * re-loading the image.\n             */\n            return resourceCache[url];\n        } else {\n            /* This URL has not been previously loaded and is not present\n             * within our cache; we'll need to load this image.\n             */\n            var img = new Image();\n            img.onload = function() {\n                /* Once our image has properly loaded, add it to our cache\n                 * so that we can simply return this image if the developer\n                 * attempts to load this file in the future.\n                 */\n                resourceCache[url] = img;\n\n                /* Once the image is actually loaded and properly cached,\n                 * call all of the onReady() callbacks we have defined.\n                 */\n                if(isReady()) {\n                    readyCallbacks.forEach(function(func) { func(); });\n                }\n            };\n\n            /* Set the initial cache value to false, this will change when\n             * the image's onload event handler is called. Finally, point\n             * the image's src attribute to the passed in URL.\n             */\n            resourceCache[url] = false;\n            img.src = url;\n        }\n    }\n\n    /* This is used by developers to grab references to images they know\n     * have been previously loaded. If an image is cached, this functions\n     * the same as calling load() on that URL.\n     */\n    function get(url) {\n        return resourceCache[url];\n    }\n\n    /* This function determines if all of the images that have been requested\n     * for loading have in fact been properly loaded.\n     */\n    function isReady() {\n        var ready = true;\n        for(var k in resourceCache) {\n            if(resourceCache.hasOwnProperty(k) &&\n               !resourceCache[k]) {\n                ready = false;\n            }\n        }\n        return ready;\n    }\n\n    /* This function will add a function to the callback stack that is called\n     * when all requested images are properly loaded.\n     */\n    function onReady(func) {\n        readyCallbacks.push(func);\n    }\n\n    /* This object defines the publicly accessible functions available to\n     * developers by creating a global Resources object.\n     */\n    window.Resources = {\n        load: load,\n        get: get,\n        onReady: onReady,\n        isReady: isReady\n    };\n})();\n","// Enemies our player must avoid\nvar Enemy = function() {\n    // Variables applied to each of our instances go here,\n    // we've provided one for you to get started\n\n    // The image/sprite for our enemies, this uses\n    // a helper we've provided to easily load images\n    this.sprite = 'images/enemy-bug.png';\n};\n\n// Update the enemy's position, required method for game\n// Parameter: dt, a time delta between ticks\nEnemy.prototype.update = function(dt) {\n    // You should multiply any movement by the dt parameter\n    // which will ensure the game runs at the same speed for\n    // all computers.\n};\n\n// Draw the enemy on the screen, required method for game\nEnemy.prototype.render = function() {\n    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);\n};\n\n// Now write your own player class\n// This class requires an update(), render() and\n// a handleInput() method.\n\nvar player = new class Player {\n  constructor() {\n\n  }\n  update() {\n\n  }\n  render() {\n\n  }\n  handleInput() {\n\n  }\n}\n\n\n// Now instantiate your objects.\n// Place all enemy objects in an array called allEnemies\n// Place the player object in a variable called player\n\nconst allEnemies = [];\n\n\n// This listens for key presses and sends the keys to your\n// Player.handleInput() method. You don't need to modify this.\ndocument.addEventListener('keyup', function(e) {\n    var allowedKeys = {\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down'\n    };\n\n    player.handleInput(allowedKeys[e.keyCode]);\n});\n","/* Engine.js\n * This file provides the game loop functionality (update entities and render),\n * draws the initial game board on the screen, and then calls the update and\n * render methods on your player and enemy objects (defined in your app.js).\n *\n * A game engine works by drawing the entire game screen over and over, kind of\n * like a flipbook you may have created as a kid. When your player moves across\n * the screen, it may look like just that image/character is moving or being\n * drawn but that is not the case. What's really happening is the entire \"scene\"\n * is being drawn over and over, presenting the illusion of animation.\n *\n * This engine makes the canvas' context (ctx) object globally available to make\n * writing app.js a little simpler to work with.\n */\n\nvar Engine = (function(global) {\n    /* Predefine the variables we'll be using within this scope,\n     * create the canvas element, grab the 2D context for that canvas\n     * set the canvas elements height/width and add it to the DOM.\n     */\n    var doc = global.document,\n        win = global.window,\n        canvas = doc.createElement('canvas'),\n        ctx = canvas.getContext('2d'),\n        lastTime;\n\n    canvas.width = 505;\n    canvas.height = 606;\n    doc.body.appendChild(canvas);\n\n    /* This function serves as the kickoff point for the game loop itself\n     * and handles properly calling the update and render methods.\n     */\n    function main() {\n        /* Get our time delta information which is required if your game\n         * requires smooth animation. Because everyone's computer processes\n         * instructions at different speeds we need a constant value that\n         * would be the same for everyone (regardless of how fast their\n         * computer is) - hurray time!\n         */\n        var now = Date.now(),\n            dt = (now - lastTime) / 1000.0;\n\n        /* Call our update/render functions, pass along the time delta to\n         * our update function since it may be used for smooth animation.\n         */\n        update(dt);\n        render();\n\n        /* Set our lastTime variable which is used to determine the time delta\n         * for the next time this function is called.\n         */\n        lastTime = now;\n\n        /* Use the browser's requestAnimationFrame function to call this\n         * function again as soon as the browser is able to draw another frame.\n         */\n        win.requestAnimationFrame(main);\n    }\n\n    /* This function does some initial setup that should only occur once,\n     * particularly setting the lastTime variable that is required for the\n     * game loop.\n     */\n    function init() {\n        reset();\n        lastTime = Date.now();\n        main();\n    }\n\n    /* This function is called by main (our game loop) and itself calls all\n     * of the functions which may need to update entity's data. Based on how\n     * you implement your collision detection (when two entities occupy the\n     * same space, for instance when your character should die), you may find\n     * the need to add an additional function call here. For now, we've left\n     * it commented out - you may or may not want to implement this\n     * functionality this way (you could just implement collision detection\n     * on the entities themselves within your app.js file).\n     */\n    function update(dt) {\n        updateEntities(dt);\n        // checkCollisions();\n    }\n\n    /* This is called by the update function and loops through all of the\n     * objects within your allEnemies array as defined in app.js and calls\n     * their update() methods. It will then call the update function for your\n     * player object. These update methods should focus purely on updating\n     * the data/properties related to the object. Do your drawing in your\n     * render methods.\n     */\n    function updateEntities(dt) {\n        allEnemies.forEach(function(enemy) {\n            enemy.update(dt);\n        });\n        player.update();\n    }\n\n    /* This function initially draws the \"game level\", it will then call\n     * the renderEntities function. Remember, this function is called every\n     * game tick (or loop of the game engine) because that's how games work -\n     * they are flipbooks creating the illusion of animation but in reality\n     * they are just drawing the entire screen over and over.\n     */\n    function render() {\n        /* This array holds the relative URL to the image used\n         * for that particular row of the game level.\n         */\n        var rowImages = [\n                'images/water-block.png',   // Top row is water\n                'images/stone-block.png',   // Row 1 of 3 of stone\n                'images/stone-block.png',   // Row 2 of 3 of stone\n                'images/stone-block.png',   // Row 3 of 3 of stone\n                'images/grass-block.png',   // Row 1 of 2 of grass\n                'images/grass-block.png'    // Row 2 of 2 of grass\n            ],\n            numRows = 6,\n            numCols = 5,\n            row, col;\n\n        // Before drawing, clear existing canvas\n        ctx.clearRect(0,0,canvas.width,canvas.height)\n\n        /* Loop through the number of rows and columns we've defined above\n         * and, using the rowImages array, draw the correct image for that\n         * portion of the \"grid\"\n         */\n        for (row = 0; row < numRows; row++) {\n            for (col = 0; col < numCols; col++) {\n                /* The drawImage function of the canvas' context element\n                 * requires 3 parameters: the image to draw, the x coordinate\n                 * to start drawing and the y coordinate to start drawing.\n                 * We're using our Resources helpers to refer to our images\n                 * so that we get the benefits of caching these images, since\n                 * we're using them over and over.\n                 */\n                ctx.drawImage(Resources.get(rowImages[row]), col * 101, row * 83);\n            }\n        }\n\n        renderEntities();\n    }\n\n    /* This function is called by the render function and is called on each game\n     * tick. Its purpose is to then call the render functions you have defined\n     * on your enemy and player entities within app.js\n     */\n    function renderEntities() {\n        /* Loop through all of the objects within the allEnemies array and call\n         * the render function you have defined.\n         */\n        allEnemies.forEach(function(enemy) {\n            enemy.render();\n        });\n\n        player.render();\n    }\n\n    /* This function does nothing but it could have been a good place to\n     * handle game reset states - maybe a new game menu or a game over screen\n     * those sorts of things. It's only called once by the init() method.\n     */\n    function reset() {\n        // noop\n    }\n\n    /* Go ahead and load all of the images we know we're going to need to\n     * draw our game level. Then set init as the callback method, so that when\n     * all of these images are properly loaded our game will start.\n     */\n    Resources.load([\n        'images/stone-block.png',\n        'images/water-block.png',\n        'images/grass-block.png',\n        'images/enemy-bug.png',\n        'images/char-boy.png'\n    ]);\n    Resources.onReady(init);\n\n    /* Assign the canvas' context object to the global variable (the window\n     * object when run in a browser) so that developers can use it more easily\n     * from within their app.js files.\n     */\n    global.ctx = ctx;\n})(this);\n","import resources from '/js/resources';\nimport app from '/js/app';\nimport engine from '/js/engine';\n\n// Get the modal\nvar modal = document.getElementById('start-game');\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks the button, open the modal\nwindow.onload = function() {\n    modal.style.display = \"block\";\n}\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\n    modal.style.display = \"none\";\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    if (event.target == modal) {\n        modal.style.display = \"none\";\n    }\n}\n"]}